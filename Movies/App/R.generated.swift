//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 7 colors.
  struct color {
    /// Color `background1`.
    static let background1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "background1")
    /// Color `background2`.
    static let background2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "background2")
    /// Color `background3`.
    static let background3 = Rswift.ColorResource(bundle: R.hostingBundle, name: "background3")
    /// Color `background4`.
    static let background4 = Rswift.ColorResource(bundle: R.hostingBundle, name: "background4")
    /// Color `separator`.
    static let separator = Rswift.ColorResource(bundle: R.hostingBundle, name: "separator")
    /// Color `text`.
    static let text = Rswift.ColorResource(bundle: R.hostingBundle, name: "text")
    /// Color `title`.
    static let title = Rswift.ColorResource(bundle: R.hostingBundle, name: "title")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "background1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "background2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "background3", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "background4", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "separator", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func separator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.separator, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "text", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func text(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.text, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "title", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func title(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.title, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "background1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func background1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.background1.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "background2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func background2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.background2.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "background3", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func background3(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.background3.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "background4", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func background4(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.background4.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "separator", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func separator(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.separator.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "text", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func text(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.text.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "title", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func title(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.title.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `ActorMovieDetailsTableViewCell`.
    static let actorMovieDetailsTableViewCell = _R.nib._ActorMovieDetailsTableViewCell()
    /// Nib `DescriptionReusableTableViewCell`.
    static let descriptionReusableTableViewCell = _R.nib._DescriptionReusableTableViewCell()
    /// Nib `ItemMovieListTableViewCell`.
    static let itemMovieListTableViewCell = _R.nib._ItemMovieListTableViewCell()
    /// Nib `PosterMovieDetailsTableViewCell`.
    static let posterMovieDetailsTableViewCell = _R.nib._PosterMovieDetailsTableViewCell()
    /// Nib `TitleReusableTableViewCell`.
    static let titleReusableTableViewCell = _R.nib._TitleReusableTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ActorMovieDetailsTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.actorMovieDetailsTableViewCell) instead")
    static func actorMovieDetailsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.actorMovieDetailsTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DescriptionReusableTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.descriptionReusableTableViewCell) instead")
    static func descriptionReusableTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.descriptionReusableTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ItemMovieListTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.itemMovieListTableViewCell) instead")
    static func itemMovieListTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemMovieListTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PosterMovieDetailsTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.posterMovieDetailsTableViewCell) instead")
    static func posterMovieDetailsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.posterMovieDetailsTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TitleReusableTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.titleReusableTableViewCell) instead")
    static func titleReusableTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.titleReusableTableViewCell)
    }
    #endif

    static func actorMovieDetailsTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ActorMovieDetailsTableViewCell? {
      return R.nib.actorMovieDetailsTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ActorMovieDetailsTableViewCell
    }

    static func descriptionReusableTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DescriptionReusableTableViewCell? {
      return R.nib.descriptionReusableTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DescriptionReusableTableViewCell
    }

    static func itemMovieListTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemMovieListTableViewCell? {
      return R.nib.itemMovieListTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemMovieListTableViewCell
    }

    static func posterMovieDetailsTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PosterMovieDetailsTableViewCell? {
      return R.nib.posterMovieDetailsTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PosterMovieDetailsTableViewCell
    }

    static func titleReusableTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TitleReusableTableViewCell? {
      return R.nib.titleReusableTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TitleReusableTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 5 localization keys.
    struct localizable {
      /// Value: %.1f🏆
      static let movie_detail_rating_label = Rswift.StringResource(key: "movie_detail_rating_label", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cast
      static let movie_detail_cast_title = Rswift.StringResource(key: "movie_detail_cast_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Overview
      static let movie_detail_overview_title = Rswift.StringResource(key: "movie_detail_overview_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Search
      static let movie_list_search_placeholder = Rswift.StringResource(key: "movie_list_search_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 🍿 Movies
      static let movie_list_navigation_title = Rswift.StringResource(key: "movie_list_navigation_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: %.1f🏆
      static func movie_detail_rating_label(_ value1: Double, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("movie_detail_rating_label", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "movie_detail_rating_label"
        }

        let format = NSLocalizedString("movie_detail_rating_label", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Cast
      static func movie_detail_cast_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("movie_detail_cast_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "movie_detail_cast_title"
        }

        return NSLocalizedString("movie_detail_cast_title", bundle: bundle, comment: "")
      }

      /// Value: Overview
      static func movie_detail_overview_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("movie_detail_overview_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "movie_detail_overview_title"
        }

        return NSLocalizedString("movie_detail_overview_title", bundle: bundle, comment: "")
      }

      /// Value: Search
      static func movie_list_search_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("movie_list_search_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "movie_list_search_placeholder"
        }

        return NSLocalizedString("movie_list_search_placeholder", bundle: bundle, comment: "")
      }

      /// Value: 🍿 Movies
      static func movie_list_navigation_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("movie_list_navigation_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "movie_list_navigation_title"
        }

        return NSLocalizedString("movie_list_navigation_title", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ItemMovieListTableViewCell.validate()
    }

    struct _ActorMovieDetailsTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ActorMovieDetailsTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ActorMovieDetailsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ActorMovieDetailsTableViewCell
      }

      fileprivate init() {}
    }

    struct _DescriptionReusableTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DescriptionReusableTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DescriptionReusableTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DescriptionReusableTableViewCell
      }

      fileprivate init() {}
    }

    struct _ItemMovieListTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ItemMovieListTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemMovieListTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemMovieListTableViewCell
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.right") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'chevron.right' is used in nib 'ItemMovieListTableViewCell', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PosterMovieDetailsTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PosterMovieDetailsTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PosterMovieDetailsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PosterMovieDetailsTableViewCell
      }

      fileprivate init() {}
    }

    struct _TitleReusableTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TitleReusableTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TitleReusableTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TitleReusableTableViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
